// Grammar of the aaa language

BOOLEAN_LITERAL = "true" | "false"

BRANCH = IF (WHITESPACE FUNCTION_BODY)? WHITESPACE (ELSE (WHITESPACE FUNCTION_BODY)? WHITESPACE)? END

ROOT = (WHITESPACE)? (FUNCTION_DEFINITION WHITESPACE)+ (WHITESPACE)?

FUNCTION_BODY = FUNCTION_BODY_ITEM (WHITESPACE FUNCTION_BODY_ITEM)*

@ prune soft
FUNCTION_BODY_ITEM = BRANCH | LOOP | OPERATOR | IDENTIFIER | LITERAL

FUNCTION_DEFINITION = FN WHITESPACE (IDENTIFIER WHITESPACE)+ BEGIN WHITESPACE (FUNCTION_BODY WHITESPACE)? END

@ forbidden KEYWORD
IDENTIFIER = regex("[a-z_]+")

INTEGER_LITERAL = regex("[0-9]+")

@ prune soft
LITERAL = BOOLEAN_LITERAL | INTEGER_LITERAL | STRING_LITERAL

LOOP = WHILE WHITESPACE (FUNCTION_BODY WHITESPACE)? END

OPERATOR = OPERATOR_NON_ALPHABETICAL | OPERATOR_KEYWORD

@ prune soft
OPERATOR_KEYWORD = "and" | "drop" | "dup" | "not" | "or" | "over" | "rot" | "strlen" | "substr" | "swap"

@ prune soft
OPERATOR_NON_ALPHABETICAL = "-" | "!=" | "." | "*" | "/" | "\n" | "%" | "+" | "<" | "<=" | "=" | ">" | ">="

STRING_LITERAL = regex("\"([^\\\\]|\\\\(\"|n|\\\\))*?\"")

@ prune hard
WHITESPACE = regex("([ \n]|$)+")

IF = "if"

ELSE = "else"

BEGIN = "begin"

END = "end"

WHILE = "while"

FN = "fn"

@ prune soft
CONTROL_FLOW_KEYWORD = IF | ELSE | BEGIN | END | WHILE | FN

@ prune soft
KEYWORD = BOOLEAN_LITERAL | CONTROL_FLOW_KEYWORD | OPERATOR_KEYWORD
