// Grammar for the
//
//    mm
//    ##    mmm    mmm
//   #  #  "   #  "   #
//   #mm#  m"""#  m"""#
//  #    # "mm"#  "mm"#
//
// language.

%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/ "\n"
%ignore COMMENT

SHEBANG: "#!" /[^\n]*/ "\n"
%ignore SHEBANG

identifier: /(?!(and|args|as|assert|bool|builtin_fn|drop|dup|else|false|fn|from|if|import|int|map|nop|not|or|over|return|rot|str|struct|swap|true|vec|while)(\W|\s))([a-z_]+)/
member_function_name: /[a-z_]+/

integer: /[0-9]+/

%import common.ESCAPED_STRING
string: ESCAPED_STRING

// block delimiters
_BEGIN:      /{(?=(\W|\s))/
_END:        /}(?=(\W|\s|$))/

// ignored keywords
_AS:         /as(?=(\W|\s))/
_ARGS:       /args(?=(\W|\s))/
_BUILTIN_FN: /builtin_fn(?=(\W|\s))/
_ELSE:       /else(?=(\W|\s))/
FN:         /fn(?=(\W|\s))/
_FROM:       /from(?=(\W|\s))/
_IMPORT:     /import(?=(\W|\s))/
_IF:         /if(?=(\W|\s))/
_RETURN:     /return(?=(\W|\s))/
_STRUCT:     /struct(?=(\W|\s))/
_WHILE:      /while(?=(\W|\s))/

// keywords for builtin types
BOOL:       /bool(?=(\W|\s))/
INT:        /int(?=(\W|\s))/
MAP:        /map(?=(\W|\s))/
STR:        /str(?=(\W|\s))/
VEC:        /vec(?=(\W|\s))/

// keywords for builtin constants
FALSE:      /false(?=(\W|\s))/
TRUE:       /true(?=(\W|\s))/

// keywords for builtin boolean operations
AND:        /and(?=(\W|\s))/
NOT:        /not(?=(\W|\s))/
OR:         /or(?=(\W|\s))/

// keywords for builtin stack operations
DUP:        /dup(?=(\W|\s))/
DROP:       /drop(?=(\W|\s))/
OVER:       /over(?=(\W|\s))/
ROT:        /rot(?=(\W|\s))/
SWAP:       /swap(?=(\W|\s))/

// keywords for builtin misscellaneous operations
ASSERT:     /assert(?=(\W|\s))/
NOP:        /nop(?=(\W|\s))/

// --- builtin file rules ---

builtins_file_root: builtin_function_definition+

builtin_function_definition: ( \
    _BUILTIN_FN string \
    builtin_function_arguments? \
    builtin_function_return_types? \
)

builtin_function_arguments: _ARGS return_types
builtin_function_return_types: _RETURN return_types

// --- regular source file + imports ---

regular_file_root: (function_definition | import_statement | struct_definition)+

import_statement: _FROM string _IMPORT import_items
import_items: import_item ("," import_item)* ","?
import_item: identifier (_AS identifier)?

// --- structs ---

struct_definition: ( \
    _STRUCT identifier \
    _BEGIN argument_list \
    _END \
)

struct_function_identifier: identifier ":" member_function_name
struct_field_query: string "?"
struct_field_update: string _BEGIN function_body _END "!"

member_function: type_literal ":" member_function_name

// --- functions, arguments, return types ---

function_definition: ( \
    FN function_name \
    function_arguments? \
    function_return_types? \
    _BEGIN function_body _END \
)

function_name: struct_function_identifier | identifier

function_arguments: _ARGS argument_list
argument_list: argument ("," argument)* ","?
argument: identifier _AS type

function_return_types: _RETURN return_types
return_types: type ("," type)* ","?

// --- types and type placeholders ---

!type_literal: (BOOL | INT | MAP | STR | VEC | identifier) type_params?
type_params: "[" type ("," type)* ","? "]"
type_placeholder: "*" identifier

type: type_literal | type_placeholder

// --- literals ---

literal: boolean | integer | string
!boolean: TRUE | FALSE

// --- function body ---

function_body: function_body_item+

function_body_item: ( \
      member_function
    | branch
    | loop
    | operator
    | identifier
    | type_literal
    | struct_field_query
    | struct_field_update
    | literal \
)

// --- branch ---

branch: ( \
    branch_condition \
    branch_if_body \
    branch_else_body? \
)

branch_condition: _IF function_body
branch_if_body: _BEGIN function_body _END
branch_else_body: _ELSE _BEGIN function_body _END

// --- loop ---

loop: loop_condition loop_body _END
loop_condition: _WHILE function_body
loop_body: _BEGIN function_body

// --- operators ---

!operator:    AND
            | ASSERT
            | DROP
            | DUP
            | NOP
            | NOT
            | OR
            | OVER
            | ROT
            | SWAP
            | /-(?=\s)/
            | /!=(?=\s)/
            | /\.(?=\s)/
            | /\*(?=\s)/
            | /\/(?=\s)/
            | /%(?=\s)/
            | /\+(?=\s)/
            | /<=(?=\s)/
            | /=(?=\s)/
            | />=(?=\s)/
            | /<(?=\s)/
            | />(?=\s)/
