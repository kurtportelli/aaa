// Grammar of the aaa language

BOOLEAN_LITERAL = "true" | "false"

BRANCH = "if" (WHITESPACE FUNCTION_BODY)? WHITESPACE ("else" (WHITESPACE FUNCTION_BODY)? WHITESPACE)? "end"

ROOT = (WHITESPACE)? (FUNCTION_DEFINITION WHITESPACE)+ (WHITESPACE)?

FUNCTION_BODY = FUNCTION_BODY_ITEM (WHITESPACE FUNCTION_BODY_ITEM)*

@ prune soft
FUNCTION_BODY_ITEM = BRANCH | LOOP | OPERATOR | IDENTIFIER | LITERAL

FUNCTION_DEFINITION = "fn" WHITESPACE (IDENTIFIER WHITESPACE)+ "begin" WHITESPACE (FUNCTION_BODY WHITESPACE)? "end"

@ banned values "and" "drop" "dup" "false" "not" "or" "over" "rot" "strlen" "true" "substr" "swap"
IDENTIFIER = regex("[a-z_]+")

INTEGER_LITERAL = regex("[0-9]+")

@ prune soft
LITERAL = BOOLEAN_LITERAL | INTEGER_LITERAL | STRING_LITERAL

LOOP = "while" WHITESPACE (FUNCTION_BODY WHITESPACE)? "end"

OPERATOR = "-" | "!=" | "." | "*" | "/" | "\n" | "%" | "+" | "<" | "<=" | "=" | ">" | ">=" | "and" | "drop" | "dup" | "not" | "or" | "over" | "rot" | "strlen" | "substr" | "swap"

STRING_LITERAL = regex("\"([^\\]|\\(\"|n|\\))*?\"")

@ prune hard
WHITESPACE = regex("([ \n]|$)+")
