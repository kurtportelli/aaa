// This file was generated using "./aaa.py generate-grammar-file"
// A unit test will make sure this file is up to date with its source

BOOLEAN_LITERAL = ("true" | "false")

BRANCH = "if" (WHITESPACE FUNCTION_BODY)? WHITESPACE ("else" (WHITESPACE FUNCTION_BODY)? WHITESPACE)? "end"

FILE = (WHITESPACE)? FUNCTION_DEFINITION (WHITESPACE FUNCTION_DEFINITION)* (WHITESPACE)?

FUNCTION_BODY = (BRANCH | LOOP | OPERATION | IDENTIFIER | LITERAL) (WHITESPACE (BRANCH | LOOP | OPERATION | IDENTIFIER | LITERAL))*

FUNCTION_DEFINITION = "fn" WHITESPACE IDENTIFIER WHITESPACE (IDENTIFIER WHITESPACE)* "begin" WHITESPACE (FUNCTION_BODY WHITESPACE)? "end"

IDENTIFIER = regex(^[a-z_]+)

INTEGER_LITERAL = regex(^[0-9]+)

LITERAL = (BOOLEAN_LITERAL | INTEGER_LITERAL | STRING_LITERAL)

LOOP = "while" WHITESPACE (FUNCTION_BODY WHITESPACE)? "end"

OPERATION = ("-" | "!=" | "." | "*" | "/" | "\n" | "%" | "+" | "<" | "<=" | "=" | ">" | ">=" | "and" | "drop" | "dup" | "not" | "or" | "over" | "rot" | "strlen" | "substr" | "swap")

STRING_LITERAL = regex(^"([^\\]|\\("|n|\\))*")

WHITESPACE = regex(^[ \n]+)
