// Grammar for the
//
//    mm
//    ##    mmm    mmm
//   #  #  "   #  "   #
//   #mm#  m"""#  m"""#
//  #    # "mm"#  "mm"#
//
// language.

// --- control flow tokens ---

@ token BEGIN = regex("begin(?=\s|$)") .
@ token ELSE  = regex("else(?=\s|$)")  .
@ token END   = regex("end(?=\s|$)")   .
@ token FN    = regex("fn(?=\s|$)")    .
@ token IF    = regex("if(?=\s|$)")    .
@ token WHILE = regex("while(?=\s|$)") .

// --- operator tokens ---

@ token AND            = regex("and(?=\s|$)")    .
@ token ASTERISK       = regex("\\*(?=\s|$)")    .
@ token BACKSLASH_N    = regex("\\\\n(?=\s|$)")  .
@ token DROP           = regex("drop(?=\s|$)")   .
@ token DUP            = regex("dup(?=\s|$)")    .
@ token EQUALS         = regex("=(?=\s|$)")      .
@ token GREATER_EQUALS = regex(">=(?=\s|$)")     .
@ token GREATER_THAN   = regex(">(?=\s|$)")      .
@ token LESS_EQUALS    = regex("<=(?=\s|$)")     .
@ token LESS_THAN      = regex("<(?=\s|$)")      .
@ token MINUS          = regex("-(?=\s|$)")      .
@ token NOP            = regex("nop(?=\s|$)")    .
@ token NOT            = regex("not(?=\s|$)")    .
@ token NOT_EQUALS     = regex("!=(?=\s|$)")     .
@ token OR             = regex("or(?=\s|$)")     .
@ token OVER           = regex("over(?=\s|$)")   .
@ token PERCENT        = regex("%(?=\s|$)")      .
@ token PERIOD         = regex("\\.(?=\s|$)")    .
@ token PLUS           = regex("\\+(?=\s|$)")    .
@ token ROT            = regex("rot(?=\s|$)")    .
@ token SLASH          = regex("/(?=\s|$)")      .
@ token STRLEN         = regex("strlen(?=\s|$)") .
@ token SUBSTR         = regex("substr(?=\s|$)") .
@ token SWAP           = regex("swap(?=\s|$)")   .

// --- literal tokens ---

@ token TRUE       = regex("true(?=\s|$)")  .
@ token FALSE      = regex("false(?=\s|$)") .

// --- more generic literal tokens ---

@ token IDENTIFIER = regex("[a-z_]+")                         .
@ token INTEGER    = regex("[0-9]+")                          .
@ token STRING     = regex("\"([^\\\\]|\\\\(\"|n|\\\\))*?\"") .

// --- pruned tokens ---

@ token @ prune WHITESPACE = regex("([ \n]|$)+") .

// ---

ROOT = (FUNCTION_DEFINITION)* .

FUNCTION_DEFINITION = FN FUNCTION_NAME_AND_ARGS BEGIN FUNCTION_BODY END .

FUNCTION_NAME_AND_ARGS = (IDENTIFIER)+ .

FUNCTION_BODY = (FUNCTION_BODY_ITEM)+ .

@ prune
FUNCTION_BODY_ITEM = BRANCH | LOOP | OPERATOR | IDENTIFIER | LITERAL .

BRANCH = IF FUNCTION_BODY BEGIN FUNCTION_BODY (ELSE FUNCTION_BODY)? END .

LOOP = WHILE FUNCTION_BODY BEGIN FUNCTION_BODY END .

@ prune
LITERAL = BOOLEAN | INTEGER | STRING .

BOOLEAN = TRUE | FALSE .

OPERATOR = (
      AND
    | ASTERISK
    | BACKSLASH_N
    | DROP
    | DUP
    | EQUALS
    | GREATER_EQUALS
    | GREATER_THAN
    | LESS_EQUALS
    | LESS_THAN
    | MINUS
    | NOP
    | NOT
    | NOT_EQUALS
    | OR
    | OVER
    | PERCENT
    | PERIOD
    | PLUS
    | ROT
    | SLASH
    | STRLEN
    | SUBSTR
    | SWAP
) .
