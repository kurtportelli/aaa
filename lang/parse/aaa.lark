// Grammar for the
//
//    mm
//    ##    mmm    mmm
//   #  #  "   #  "   #
//   #mm#  m"""#  m"""#
//  #    # "mm"#  "mm"#
//
// language.

%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/ "\n"
%ignore COMMENT

identifier: /[a-z_]+/
integer: /[0-9]+/
string: /\"([^\\\\]|\\\\(\"|n|\\\\))*?\"/

builtins_file_root: builtin_function_definition+

builtin_function_definition: "builtin_fn" string builtin_function_arguments? builtin_function_return_types?

builtin_function_arguments: "args" return_types

builtin_function_return_types: "return" return_types

regular_file_root: (function_definition | import_statement | struct_definition)+

// TODO consider supporting empty struct using nop syntax
struct_definition: "struct" identifier "begin" argument_list "end"

import_statement: "from" string "import" import_items

import_items: import_item ("," import_item)* ","?

import_item: identifier ("as" identifier)?

struct_function_definition: identifier ":" identifier

function_definition: "fn" function_name function_arguments? function_return_types? "begin" function_body "end"

function_name: struct_function_definition | identifier

function_arguments: "args" argument_list

function_return_types: "return" return_types


!type_literal: ("bool" | "int" | "map" | "str" | "vec" | identifier) type_params?

type_params: "[" type ("," type)* ","? "]"

type_placeholder: "*" identifier

argument: identifier "as" type

argument_list: argument ("," argument)* ","?

type: type_literal | type_placeholder

return_types: type ("," type)* ","?

function_body: function_body_item+

member_function: type_literal ":" identifier

function_body_item:   member_function
                    | branch
                    | loop
                    | operator
                    | identifier
                    | type_literal
                    | struct_field_query
                    | struct_field_update
                    | literal

branch: branch_condition branch_if_body branch_else_body? "end"

branch_condition: "if" function_body
branch_if_body: "begin" function_body
branch_else_body: "else" function_body


loop: loop_condition loop_body "end"

loop_condition: "while" function_body
loop_body: "begin" function_body


struct_field_query: string "?"

struct_field_update: string function_body "!"

literal: boolean | integer | string

boolean: "true" | "false"

!operator:    "and"
            | "assert"
            | "*"
            | "drop"
            | "dup"
            | "="
            | ">="
            | ">"
            | "<="
            | "<"
            | "-"
            | "nop"
            | "not"
            | "!="
            | "or"
            | "over"
            | "%"
            | "."
            | "+"
            | "rot"
            | "/"
            | "strlen" // TODO unreachable, parses as str len
            | "substr"
            | "swap"
